import { GeocodingOptions, GeocodingFeature, GeocodingResponse } from '@mapbox/search-js-core';
import mapboxgl from 'mapbox-gl';
import { MapboxSearchListbox } from './MapboxSearchListbox';
import { HTMLScopedElement } from './HTMLScopedElement';
import { Theme } from '../theme';
import { MapboxHTMLEvent } from '../MapboxHTMLEvent';
import { PopoverOptions } from '../utils/popover';
export declare type MapboxSearchListboxSearchType = MapboxSearchListbox<GeocodingFeature>;
declare type SearchEventTypes = {
    /**
     * Fired when the user is typing and is provided a list of suggestions.
     *
     * The underlying response from {@link GeocodingCore} is passed as the event's detail.
     *
     * @event suggest
     * @instance
     * @memberof MapboxGeocoder
     * @type {GeocodingResponse}
     * @example
     * ```typescript
     * search.addEventListener('suggest', (event) => {
     *   const suggestions = event.detail.suggestions;
     *   // ...
     * });
     * ```
     */
    suggest: MapboxHTMLEvent<GeocodingResponse>;
    /**
     * Fired when {@link GeocodingCore} has errored providing a list of suggestions.
     *
     * The underlying error is passed as the event's detail.
     *
     * @event suggesterror
     * @instance
     * @memberof MapboxGeocoder
     * @type {Error}
     * @example
     * ```typescript
     * search.addEventListener('suggesterror', (event) => {
     *   const error = event.detail;
     *   // ...
     * });
     * ```
     */
    suggesterror: MapboxHTMLEvent<Error>;
    /**
     * Fired when the user has selected a suggestion.
     *
     * The underlying response from {@link GeocodingCore} is passed as the event's detail.
     *
     * @event retrieve
     * @instance
     * @memberof MapboxGeocoder
     * @type {GeocodingFeature}
     * @example
     * ```typescript
     * search.addEventListener('retrieve', (event) => {
     *   const feature = event.detail;
     *   // ...
     * });
     * ```
     */
    retrieve: MapboxHTMLEvent<GeocodingFeature>;
    /**
     * Fired when the user has changed the `<input>` text.
     *
     * The new input value is passed as the event's detail.
     *
     * @event input
     * @instance
     * @memberof MapboxGeocoder
     * @type {string}
     * @example
     * ```typescript
     * search.addEventListener('input', (event) => {
     *   if (e.target !== e.currentTarget) return;
     *   const searchText = event.detail;
     *   // ...
     * });
     * ```
     */
    input: MapboxHTMLEvent<string>;
    /**
     * Fired when the user has cleared the <input> box,
     * either by deleting all text or clicking the "Clear" icon.
     *
     * @event clear
     * @instance
     * @memberof MapboxGeocoder
     * @example
     * ```typescript
     * search.addEventListener('clear', () => {
     *   console.log('search box cleared');
     *   // ...
     * });
     * ```
     */
    clear: MapboxHTMLEvent<unknown>;
};
/**
 * `MapboxGeocoder`, also available as the element `<mapbox-geocoder>`,
 * is an element that lets you search for addresses and places using
 * the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding-v6/).
 *
 * It can control a [Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js/guides/) map
 * to zoom to the selected result.
 *
 * Additionally, `MapboxGeocoder` implements the [IControl](https://www.mapbox.com/mapbox-gl-js/api/markers/#icontrol)
 * interface.
 *
 * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).
 *
 * @class MapboxGeocoder
 * @example
 * ```typescript
 * const search = new MapboxGeocoder();
 * search.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';
 * map.addControl(search);
 * ```
 * @example
 * <mapbox-geocoder
 *   access-token="YOUR_MAPBOX_ACCESS_TOKEN"
 *   proximity="0,0"
 * >
 * </mapbox-geocoder>
 */
export declare class MapboxGeocoder extends HTMLScopedElement<SearchEventTypes> implements mapboxgl.IControl {
    #private;
    /**
     * This is read by the Web Components API to affect the
     * {@link MapboxGeocoder#attributeChangedCallback} below.
     *
     * All of these are passthroughs to the underlying {@link MapboxSearchListbox}.
     *
     * @ignore
     */
    static observedAttributes: string[];
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     *
     * @name accessToken
     * @instance
     * @memberof MapboxGeocoder
     * @example
     * ```typescript
     * search.accessToken = 'pk.my-mapbox-access-token';
     * ```
     */
    get accessToken(): string;
    set accessToken(newToken: string);
    /**
     * The value of the input element.
     *
     * @name value
     * @instance
     * @memberof MapboxGeocoder
     * @example
     * ```typescript
     * console.log(search.value);
     * ```
     */
    get value(): string;
    set value(newValue: string);
    /**
     * The `<input>` element wrapped by the autofill component.
     *
     * @name input
     * @instance
     * @memberof MapboxGeocoder
     * @type {HTMLInputElement}
     */
    get input(): HTMLInputElement;
    protected get template(): HTMLTemplateElement;
    protected get templateStyle(): string;
    protected get templateUserStyle(): string;
    /**
     * Options to pass to the underlying {@link GeocodingCore} interface.
     *
     * @name options
     * @instance
     * @memberof MapboxGeocoder
     * @type {GeocodingOptions}
     * @example
     * ```typescript
     * search.options = {
     *  language: 'en',
     *  country: 'US',
     * };
     * ```
     */
    options: Partial<GeocodingOptions>;
    /**
     * The {@link Theme} to use for styling the suggestion box and geocoder input box.
     *
     * @name theme
     * @instance
     * @memberof MapboxGeocoder
     * @type {Theme}
     * @example
     * ```typescript
     * search.theme = {
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   },
     *   cssText: ".Input:active { opacity: 0.9; }"
     * };
     * ```
     */
    get theme(): Theme;
    set theme(theme: Theme);
    /**
     * The {@link PopoverOptions} to define popover positioning.
     *
     * @name popoverOptions
     * @instance
     * @memberof MapboxGeocoder
     * @type {PopoverOptions}
     * @example
     * ```typescript
     * search.popoverOptions = {
     *   placement: 'top-start',
     *   flip: true,
     *   offset: 5
     * };
     * ```
     */
    get popoverOptions(): Partial<PopoverOptions>;
    set popoverOptions(newOptions: Partial<PopoverOptions>);
    /**
     * The input element's placeholder text. The default value may be localized if {@link GeocodingOptions#language} is set.
     *
     * @name placeholder
     * @instance
     * @memberof MapboxGeocoder
     * @type {string}
     */
    get placeholder(): string;
    set placeholder(text: string);
    /**
     * A callback providing the opportunity to validate and/or manipulate the input text before it triggers a search, for example by using a regular expression.
     * If a truthy string value is returned, it will be passed into the underlying search API. If `null`, `undefined` or empty string is returned, no search request will be performed.
     *
     * @name interceptSearch
     * @instance
     * @memberof MapboxGeocoder
     * @example
     * Enable search only when the input value length is more than 3 characters.
     * ```typescript
     * search.interceptSearch = (val) => val?.length > 3 ? val : null;
     * ```
     */
    interceptSearch: (val: string) => string;
    /** @section {Map settings} */
    /**
     * A [mapbox-gl](https://github.com/mapbox/mapbox-gl-js) instance to use when creating [Markers](https://docs.mapbox.com/mapbox-gl-js/api/#marker). Required if {@link MapboxGeocoder#marker} is `true`.
     *
     * @name mapboxgl
     * @instance
     * @memberof MapboxGeocoder
     */
    mapboxgl: typeof mapboxgl;
    /**
     * If `true`, a [Marker](https://docs.mapbox.com/mapbox-gl-js/api/#marker) will be added to the map at the location of the user-selected result using a default set of Marker options.  If the value is an object, the marker will be constructed using these options. If `false`, no marker will be added to the map. Requires that {@link MapboxGeocoder#mapboxgl} also be set.
     *
     * @name marker
     * @instance
     * @memberof MapboxGeocoder
     * @type {boolean | mapboxgl.MarkerOptions}
     * @example
     * ```typescript
     * search.marker = {
     *   color: 'red',
     *   draggable: true
     * };
     * ```
     */
    marker: boolean | mapboxgl.MarkerOptions;
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /** @section {Methods} */
    /**
     * Focuses the input element.
     */
    focus(): void;
    /**
     * Sets the input text and triggers a search programmatically
     */
    search(text: string): void;
    /** @section {Map binding} */
    /**
     * Connects the Geocoder to a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map),
     * which handles both setting proximity and zoom after a suggestion click.
     *
     * @example
     * ```typescript
     * const search = new MapboxGeocoder();
     * search.bindMap(map);
     * ```
     */
    bindMap(map: mapboxgl.Map): void;
    /**
     * Unbinds the Geocoder from a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map).
     */
    unbindMap(): void;
    onAdd(map: mapboxgl.Map): HTMLElement;
    onRemove(): void;
    getDefaultPosition(): string;
}
declare global {
    interface Window {
        MapboxGeocoder: typeof MapboxGeocoder;
    }
}
export {};
